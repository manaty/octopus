import java.util.stream.Collectors

apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'distribution'

dependencies {
    compile "io.bootique.liquibase:bootique-liquibase:${bootiqueVersion}"
    // TODO: see https://github.com/bootique/bootique-liquibase/issues/30
    compile "org.liquibase:liquibase-core:3.6.3"

    compile project(":server-api")
    compile "io.bootique:bootique:${bootiqueVersion}"
    compile "io.bootique.jdbc:bootique-jdbc:${bootiqueVersion}"
    compile "io.bootique.jdbc:bootique-jdbc-tomcat:${bootiqueVersion}"
    compile "io.bootique.jetty:bootique-jetty:${bootiqueVersion}"
    compile "io.bootique.jetty:bootique-jetty-websocket:${bootiqueVersion}"
    compile "io.bootique.jersey:bootique-jersey:${bootiqueVersion}"
    compile "io.vertx:vertx-rx-java2:${vertxVersion}"
    compile "io.vertx:vertx-jdbc-client:${vertxVersion}"
    compile "org.postgresql:postgresql:${postgresVersion}"
    compile "com.h2database:h2:${h2Version}"
    compile "org.slf4j:slf4j-api:${slf4jVersion}"
    compile "org.tools4j:tools4j-meanvar:1.1"

    // When investigating tests that involve BQ runtime restarts,
    // you may comment out bootique-logback and uncomment log4j adapter.
    // Otherwise you may not see all log messages, because bootique-logback
    // disables Logback context upon BQ runtime shutdown
    compile "io.bootique.logback:bootique-logback:${bootiqueVersion}"
//    testCompile "org.apache.logging.log4j:log4j:2.11.2"
//    testCompile "org.apache.logging.log4j:log4j-slf4j-impl:2.11.2"
    
    testCompile project(":db")
    testCompile "io.bootique:bootique-test:${bootiqueVersion}"
    testCompile "org.eclipse.jetty.websocket:websocket-server:${bootiqueJettyVersion}"
    testCompile "ru.yandex.qatools.embed:postgresql-embedded:2.10"
    testCompile "io.vertx:vertx-unit:${vertxVersion}"
    testCompile "org.skyscreamer:jsonassert:1.5.0"
}

task checkPropertiesTask {
    doLast {
        def propertyNames = ["embedded_postgres_cache_path"]
        checkProperties(propertyNames)
        tasks.withType(Test).configureEach {
            propertyNames.forEach {
                systemProperty it, project.property(it)
            }
        }
    }
}

def checkProperties(Collection<String> propertyNames) {
    def missingPropertyNames = propertyNames.stream()
            .filter { propertyName -> !project.hasProperty(propertyName) }
            .collect(Collectors.toList())

    if (!missingPropertyNames.isEmpty()) {
        throw new IllegalMonitorStateException("Some of the projects properties are not defined." +
                " Please provide a value for each of them via `-P` command line parameter." +
                " Missing properties:\n" + String.join("\n", missingPropertyNames));
    }
}

test.dependsOn checkPropertiesTask
tasks.build.dependsOn tasks.shadowJar

jar {
    manifest {
        attributes (
            'Main-Class': 'net.manaty.octopusync.Main',
            'Class-Path': configurations.runtimeClasspath.files.collect { it.getName() }.join(' ')
        )

    }
}

shadowJar {
    mergeServiceFiles()
}

distributions {
    main {
        baseName = 'octopus-dist'
        contents {
            into ('lib') {
                from jar
                from (project.configurations.runtime)
            }
            into ('site') {
                from "src/main/static"
            }
            from "${rootDir}/LICENSE"
        }
    }
}